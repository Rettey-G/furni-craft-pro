<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Materials Shop - FurniCraft Pro</title>
  <link rel="stylesheet" href="styles.css">
  <link rel="stylesheet" href="common-nav.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <!-- Add Axios for API calls -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <style>
    .shop-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .shop-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }
    
    .search-filter {
      display: flex;
      gap: 10px;
    }
    
    .search-filter input {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      width: 250px;
    }
    
    /* User Authentication Styles */
    .auth-container {
      position: fixed;
      top: 70px;
      right: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      padding: 15px;
      z-index: 1000;
      width: 300px;
    }
    
    .auth-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .auth-header h3 {
      margin: 0;
    }
    
    .auth-close {
      background: none;
      border: none;
      font-size: 18px;
      cursor: pointer;
    }
    
    .auth-tabs {
      display: flex;
      margin-bottom: 15px;
      border-bottom: 1px solid #ddd;
    }
    
    .auth-tab {
      padding: 8px 15px;
      cursor: pointer;
      border-bottom: 2px solid transparent;
    }
    
    .auth-tab.active {
      border-bottom: 2px solid #4CAF50;
      font-weight: bold;
    }
    
    .auth-form {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .auth-form input {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .auth-form button {
      padding: 10px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    
    .auth-form button:hover {
      background: #45a049;
    }
    
    .auth-error {
      color: #f44336;
      font-size: 14px;
      margin-top: 5px;
    }
    
    .user-profile {
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: pointer;
      padding: 5px 10px;
      border-radius: 20px;
      transition: background 0.3s;
    }
    
    .user-profile:hover {
      background: #f5f5f5;
    }
    
    .user-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: #4CAF50;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    
    .search-filter select {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .product-card {
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      overflow: hidden;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    
    .product-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .product-image {
      height: 200px;
      width: 100%;
      object-fit: cover;
      border-bottom: 1px solid #eee;
      background-color: #f9f9f9;
    }
    
    .product-info {
      padding: 15px;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
    }
    
    .product-name {
      margin: 0 0 10px 0;
      font-size: 18px;
      color: #333;
    }
    
    .product-description {
      margin: 0 0 15px 0;
      color: #666;
      font-size: 14px;
      line-height: 1.4;
    }
    
    .product-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 15px;
      padding-top: 15px;
      border-top: 1px solid #eee;
    }
    
    .product-price {
      font-weight: bold;
      font-size: 22px;
      color: #2980b9;
      margin-bottom: 5px;
    }
    
    .product-price .currency {
      font-weight: normal;
      font-size: 0.8em;
      color: #666;
      margin-right: 3px;
    }
    
    .product-vendor {
      font-size: 14px;
      color: #7f8c8d;
    }
    
    .vendor-comparison {
      display: flex;
      flex-direction: column;
      margin-top: 10px;
      font-size: 13px;
      flex-grow: 1;
    }
    
    .vendor-price {
      padding: 6px 10px;
      border-radius: 4px;
      background-color: #f8f9fa;
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 14px;
      align-items: center;
    }
    
    .vendor-price.best {
      background-color: #e8f5e9;
      color: #2e7d32;
      font-weight: bold;
    }
    
    .vendor-logo {
      width: 20px;
      height: 20px;
      margin-right: 8px;
      border-radius: 50%;
      display: inline-block;
      vertical-align: middle;
      background-size: cover;
      background-position: center;
    }
    
    .sonee-logo {
      background-color: #e74c3c;
    }
    
    .veligaa-logo {
      background-color: #3498db;
    }
    
    .alia-logo {
      background-color: #2ecc71;
    }
    
    .category-filter {
      margin-bottom: 20px;
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }
    
    .category-btn {
      padding: 8px 15px;
      background-color: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .category-btn:hover {
      background-color: #e9ecef;
    }
    
    .category-btn.active {
      background-color: #3498db;
      color: white;
      border-color: #3498db;
    }
    
    .add-to-cart {
      display: block;
      width: 100%;
      padding: 10px;
      margin-top: 15px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    
    .add-to-cart:hover {
      background-color: #2980b9;
    }
  </style>
</head>
<body>
  <header>
    <!-- Common navigation will be inserted here by common-nav.js -->
  </header>
  
  <!-- User Authentication UI -->
  <div id="auth-button" class="user-profile" style="position: fixed; top: 15px; right: 20px; z-index: 1001;">
    <div class="user-avatar"><i class="fas fa-user"></i></div>
    <span id="user-name">Sign In</span>
  </div>
  
  <div id="auth-container" class="auth-container" style="display: none;">
    <div class="auth-header">
      <h3 id="auth-title">Sign In</h3>
      <button class="auth-close" id="auth-close"><i class="fas fa-times"></i></button>
    </div>
    
    <div class="auth-tabs">
      <div class="auth-tab active" id="login-tab">Login</div>
      <div class="auth-tab" id="register-tab">Register</div>
    </div>
    
    <div id="login-form" class="auth-form">
      <input type="text" placeholder="Username" id="login-username">
      <input type="password" placeholder="Password" id="login-password">
      <div id="login-error" class="auth-error"></div>
      <button id="login-button">Sign In</button>
    </div>
    
    <div id="register-form" class="auth-form" style="display: none;">
      <input type="text" placeholder="Name" id="register-name">
      <input type="text" placeholder="Username" id="register-username">
      <input type="email" placeholder="Email" id="register-email">
      <input type="password" placeholder="Password" id="register-password">
      <div id="register-error" class="auth-error"></div>
      <button id="register-button">Create Account</button>
    </div>
    
    <div id="profile-view" style="display: none;">
      <div style="margin-bottom: 15px;">
        <p><strong>Name:</strong> <span id="profile-name"></span></p>
        <p><strong>Username:</strong> <span id="profile-username"></span></p>
        <p><strong>Email:</strong> <span id="profile-email"></span></p>
      </div>
      <button id="logout-button" style="background: #f44336;">Sign Out</button>
    </div>
  </div>
  
  <div class="page-title">
    <h2>Materials Shop</h2>
  </div>

  <div class="shop-container">
    <div class="shop-header">
      <h2>Shop for Materials</h2>
      <div class="search-filter">
        <input type="text" id="search-input" placeholder="Search products...">
        <select id="sort-by">
          <option value="price-asc">Price: Low to High</option>
          <option value="price-desc">Price: High to Low</option>
          <option value="name-asc">Name: A to Z</option>
          <option value="name-desc">Name: Z to A</option>
        </select>
      </div>
    </div>
    
    <div class="category-filter">
      <button class="category-btn active" data-category="all">All Products</button>
      <button class="category-btn" data-category="wood">Wood</button>
      <button class="category-btn" data-category="hardware">Hardware</button>
      <button class="category-btn" data-category="fasteners">Fasteners</button>
      <button class="category-btn" data-category="tools">Tools</button>
      <button class="category-btn" data-category="finishes">Finishes</button>
      <button class="category-btn" data-category="furniture">Furniture</button>
      <button class="category-btn" data-category="safety">Safety Gear</button>
    </div>
    
    <div class="products-grid" id="products-grid">
      <!-- Products will be loaded here -->
    </div>
  </div>

  <script src="common-nav.js"></script>
  <script>
    // MongoDB API integration
    let products = [];
    let currentUser = null;
    
    // Fetch products from MongoDB API
    async function fetchProducts() {
      try {
        const response = await fetch('/api/products');
        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }
        products = await response.json();
        console.log('Products loaded from API:', products.length);
        loadProducts(products);
      } catch (error) {
        console.error('Error fetching products:', error);
        // Fallback to local data if API fails
        console.log('Using fallback product data');
        products = [
      // Alia Hardware Special Products
      {
        id: 101,
        name: "Alia Premium Door Handles Set",
        description: "High-quality stainless steel door handles with tropical climate protection. Exclusive to Alia Hardware.",
        category: "hardware",
        image: "https://m.media-amazon.com/images/I/71nJxZ9AUrL.jpg",
        vendors: [
          { name: "Alia Hardware", price: 350, logo: "alia-logo" },
          { name: "Sonee Hardware", price: 395, logo: "sonee-logo" },
          { name: "Veligaa Hardware", price: 380, logo: "veligaa-logo" }
        ]
      },
      {
        id: 102,
        name: "Alia Tropical Wood Sealer",
        description: "Special formula wood sealer designed for Maldivian climate. Protects against humidity and salt air.",
        category: "finishes",
        image: "https://m.media-amazon.com/images/I/71C5+xFzHsL._AC_UF1000,1000_QL80_.jpg",
        vendors: [
          { name: "Alia Hardware", price: 450, logo: "alia-logo" },
          { name: "Sonee Hardware", price: 475, logo: "sonee-logo" },
          { name: "Veligaa Hardware", price: 490, logo: "veligaa-logo" }
        ]
      },
      {
        id: 1,
        name: "Finish Nails Assortment",
        description: "Headless nails for hidden joints in fine furniture work. Various sizes from 3/4 inch to 2 inch lengths.",
        category: "fasteners",
        image: "https://m.media-amazon.com/images/I/71JDsZfKDlL._AC_UF1000,1000_QL80_.jpg",
        vendors: [
          { name: "Sonee Hardware", price: 125, logo: "sonee-logo" },
          { name: "Veligaa Hardware", price: 135, logo: "veligaa-logo" },
          { name: "Alia Hardware", price: 120, logo: "alia-logo" }
        ]
      },
      {
        id: 2,
        name: "Wood Screws Assortment",
        description: "Premium wood screws in various sizes from #4 x 1/2 inch to #12 x 3 inch. Perfect for all furniture assembly needs.",
        category: "fasteners",
        image: "https://m.media-amazon.com/images/I/81+PeODvVCL._AC_UF1000,1000_QL80_.jpg",
        vendors: [
          { name: "Sonee Hardware", price: 195, logo: "sonee-logo" },
          { name: "Veligaa Hardware", price: 185, logo: "veligaa-logo" },
          { name: "Alia Hardware", price: 210, logo: "alia-logo" }
        ]
      },
      {
        id: 3,
        name: "Marine Plywood Sheet (4' x 8')",
        description: "Premium quality marine plywood, water-resistant and perfect for furniture construction in humid environments.",
        category: "wood",
        image: "https://5.imimg.com/data5/SELLER/Default/2022/9/QL/OY/DP/26473382/marine-plywood-500x500.jpg",
        vendors: [
          { name: "Sonee Hardware", price: 1850, logo: "sonee-logo" },
          { name: "Veligaa Hardware", price: 1795, logo: "veligaa-logo" },
          { name: "Alia Hardware", price: 1899, logo: "alia-logo" }
        ]
      },
      {
        id: 4,
        name: "MDF Board (4' x 8')",
        description: "Medium-density fiberboard, ideal for furniture, cabinets, and shelving. Smooth surface for painting or laminating.",
        category: "wood",
        image: "https://5.imimg.com/data5/SELLER/Default/2021/12/QO/DV/BM/3823480/mdf-board-500x500.jpg",
        vendors: [
          { name: "Sonee Hardware", price: 1250, logo: "sonee-logo" },
          { name: "Veligaa Hardware", price: 1195, logo: "veligaa-logo" },
          { name: "Alia Hardware", price: 1275, logo: "alia-logo" }
        ]
      }
    ];
    
    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Load initial products
      loadProducts(products);
      
      // Set up event listeners
      setupEventListeners();
    });
    
    // Load products into the grid
    function loadProducts(productsToShow) {
      const productsGrid = document.getElementById('products-grid');
      productsGrid.innerHTML = '';
      
      productsToShow.forEach(product => {
        // Find best price vendor
        const bestVendor = product.vendors.reduce((best, current) => 
          current.price < best.price ? current : best, product.vendors[0]);
        
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        
        let vendorComparisonHTML = '';
        product.vendors.forEach(vendor => {
          const isBest = vendor.price === bestVendor.price;
          vendorComparisonHTML += `
            <div class="vendor-price ${isBest ? 'best' : ''}">
              <div>
                <div class="vendor-logo ${vendor.logo}"></div>
                ${vendor.name}
              </div>
              <div><span class="currency">MVR</span>${vendor.price.toFixed(2)}</div>
            </div>
          `;
        });
        
        productCard.innerHTML = `
          <img src="${product.image}" alt="${product.name}" class="product-image" onerror="this.src='https://via.placeholder.com/300x200?text=Product+Image'">
          <div class="product-info">
            <h4 class="product-name">${product.name}</h4>
            <p class="product-description">${product.description}</p>
            <div class="vendor-comparison">
              ${vendorComparisonHTML}
            </div>
            <div class="product-meta">
              <div class="product-price"><span class="currency">MVR</span>${bestVendor.price.toFixed(2)}</div>
              <div class="product-vendor">Best price at ${bestVendor.name}</div>
            </div>
            <button class="add-to-cart" data-id="${product.id}">Add to Cart</button>
          </div>
        `;
        
        productsGrid.appendChild(productCard);
      });
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Category filter
      const categoryButtons = document.querySelectorAll('.category-btn');
      categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          categoryButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          this.classList.add('active');
          
          // Filter products
          const category = this.getAttribute('data-category');
          let filteredProducts = products;
          
          if (category !== 'all') {
            filteredProducts = products.filter(product => product.category === category);
          }
          
          // Apply current search filter
          const searchTerm = document.getElementById('search-input').value.toLowerCase();
          if (searchTerm) {
            filteredProducts = filteredProducts.filter(product => 
              product.name.toLowerCase().includes(searchTerm) || 
              product.description.toLowerCase().includes(searchTerm)
            );
          }
          
          // Load filtered products
          loadProducts(filteredProducts);
        });
      });
      
      // Search input
      const searchInput = document.getElementById('search-input');
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const activeCategory = document.querySelector('.category-btn.active').getAttribute('data-category');
        
        // Filter by category first
        let filteredProducts = products;
        if (activeCategory !== 'all') {
          filteredProducts = products.filter(product => product.category === activeCategory);
        }
        
        // Then filter by search term
        if (searchTerm) {
          filteredProducts = filteredProducts.filter(product => 
            product.name.toLowerCase().includes(searchTerm) || 
            product.description.toLowerCase().includes(searchTerm)
          );
        }
        
        // Load filtered products
        loadProducts(filteredProducts);
      });
      
      // Sort dropdown
      const sortBy = document.getElementById('sort-by');
      sortBy.addEventListener('change', function() {
        const activeCategory = document.querySelector('.category-btn.active').getAttribute('data-category');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        // Filter by category first
        let filteredProducts = products;
        if (activeCategory !== 'all') {
          filteredProducts = products.filter(product => product.category === activeCategory);
        }
        
        // Then filter by search term
        if (searchTerm) {
          filteredProducts = filteredProducts.filter(product => 
            product.name.toLowerCase().includes(searchTerm) || 
            product.description.toLowerCase().includes(searchTerm)
          );
        }
        
        // Sort products
        const sortValue = this.value;
        switch (sortValue) {
          case 'price-asc':
            filteredProducts.sort((a, b) => {
              const aPrice = Math.min(...a.vendors.map(v => v.price));
              const bPrice = Math.min(...b.vendors.map(v => v.price));
              return aPrice - bPrice;
            });
            break;
          case 'price-desc':
            filteredProducts.sort((a, b) => {
              const aPrice = Math.min(...a.vendors.map(v => v.price));
              const bPrice = Math.min(...b.vendors.map(v => v.price));
              return bPrice - aPrice;
            });
            break;
          case 'name-asc':
            filteredProducts.sort((a, b) => a.name.localeCompare(b.name));
            break;
          case 'name-desc':
            filteredProducts.sort((a, b) => b.name.localeCompare(a.name));
            break;
        }
        
        // Load sorted products
        loadProducts(filteredProducts);
      });
      
      // Add to cart buttons
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('add-to-cart')) {
          const productId = parseInt(e.target.getAttribute('data-id'));
          alert(`Product ID ${productId} added to cart!`);
        }
      });
    }
    
    // Load products into the grid
    function loadProducts(productsToShow) {
      const productsGrid = document.getElementById('products-grid');
      productsGrid.innerHTML = ''; // Clear existing products
      
      if (productsToShow.length === 0) {
        productsGrid.innerHTML = '<div class="no-products">No products found matching your criteria</div>';
        return;
      }
      
      productsToShow.forEach(product => {
        // Find the best price vendor
        const bestVendor = product.vendors.reduce((best, current) => 
          current.price < best.price ? current : best, product.vendors[0]);
        
        // Create product card
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        
        // Create product image
        const productImage = document.createElement('img');
        productImage.src = product.image || 'assets/images/product-placeholder.jpg';
        productImage.alt = product.name;
        productCard.appendChild(productImage);
        
        // Create product info
        const productInfo = document.createElement('div');
        productInfo.className = 'product-info';
        
        // Product name
        const productName = document.createElement('h3');
        productName.textContent = product.name;
        productInfo.appendChild(productName);
        
        // Product description
        const productDesc = document.createElement('p');
        productDesc.className = 'product-description';
        productDesc.textContent = product.description;
        productInfo.appendChild(productDesc);
        
        // Best price
        const productPrice = document.createElement('div');
        productPrice.className = 'product-price';
        productPrice.innerHTML = `<span class="best-price">Best Price: MVR ${bestVendor.price.toFixed(2)}</span> at ${bestVendor.name}`;
        productInfo.appendChild(productPrice);
        
        // Vendor comparison
        const vendorComparison = document.createElement('div');
        vendorComparison.className = 'vendor-comparison';
        vendorComparison.innerHTML = '<h4>Compare Prices:</h4>';
        
        const vendorList = document.createElement('ul');
        product.vendors.forEach(vendor => {
          const vendorItem = document.createElement('li');
          vendorItem.innerHTML = `<span class="vendor-name">${vendor.name}:</span> <span class="vendor-price">MVR ${vendor.price.toFixed(2)}</span>`;
          vendorList.appendChild(vendorItem);
        });
        
        vendorComparison.appendChild(vendorList);
        productInfo.appendChild(vendorComparison);
        
        // Add to cart button
        const addToCartBtn = document.createElement('button');
        addToCartBtn.className = 'add-to-cart';
        addToCartBtn.setAttribute('data-id', product.id);
        addToCartBtn.innerHTML = '<i class="fas fa-shopping-cart"></i> Add to Cart';
        productInfo.appendChild(addToCartBtn);
        
        productCard.appendChild(productInfo);
        productsGrid.appendChild(productCard);
      });
    }
    
    // Set up event listeners for search and filters
    function setupEventListeners() {
      const searchInput = document.getElementById('search-input');
      const categoryFilter = document.getElementById('category-filter');
      const vendorFilter = document.getElementById('vendor-filter');
      const sortFilter = document.getElementById('sort-filter');
      
      // Search functionality
      searchInput.addEventListener('input', function() {
        filterProducts();
      });
      
      // Category filter
      categoryFilter.addEventListener('change', function() {
        filterProducts();
      });
      
      // Vendor filter
      vendorFilter.addEventListener('change', function() {
        filterProducts();
      });
      
      // Sort filter
      sortFilter.addEventListener('change', function() {
        filterProducts();
      });
      
      // User authentication event listeners
      const authButton = document.getElementById('auth-button');
      const authContainer = document.getElementById('auth-container');
      const authClose = document.getElementById('auth-close');
      const loginTab = document.getElementById('login-tab');
      const registerTab = document.getElementById('register-tab');
      const loginForm = document.getElementById('login-form');
      const registerForm = document.getElementById('register-form');
      const profileView = document.getElementById('profile-view');
      const loginButton = document.getElementById('login-button');
      const registerButton = document.getElementById('register-button');
      const logoutButton = document.getElementById('logout-button');
      
      // Toggle auth container
      authButton.addEventListener('click', function() {
        authContainer.style.display = authContainer.style.display === 'none' ? 'block' : 'none';
      });
      
      // Close auth container
      authClose.addEventListener('click', function() {
        authContainer.style.display = 'none';
      });
      
      // Switch between login and register tabs
      loginTab.addEventListener('click', function() {
        loginTab.classList.add('active');
        registerTab.classList.remove('active');
        loginForm.style.display = 'flex';
        registerForm.style.display = 'none';
        profileView.style.display = 'none';
        document.getElementById('auth-title').textContent = 'Sign In';
      });
      
      registerTab.addEventListener('click', function() {
        registerTab.classList.add('active');
        loginTab.classList.remove('active');
        registerForm.style.display = 'flex';
        loginForm.style.display = 'none';
        profileView.style.display = 'none';
        document.getElementById('auth-title').textContent = 'Create Account';
      });
      
      // Login form submission
      loginButton.addEventListener('click', async function() {
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        const errorElement = document.getElementById('login-error');
        
        if (!username || !password) {
          errorElement.textContent = 'Please enter both username and password';
          return;
        }
        
        try {
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
          });
          
          const data = await response.json();
          
          if (data.success) {
            currentUser = data.user;
            updateUserInterface();
            authContainer.style.display = 'none';
          } else {
            errorElement.textContent = data.message || 'Invalid username or password';
          }
        } catch (error) {
          console.error('Login error:', error);
          errorElement.textContent = 'An error occurred during login';
        }
      });
      
      // Register form submission
      registerButton.addEventListener('click', async function() {
        const name = document.getElementById('register-name').value;
        const username = document.getElementById('register-username').value;
        const email = document.getElementById('register-email').value;
        const password = document.getElementById('register-password').value;
        const errorElement = document.getElementById('register-error');
        
        if (!name || !username || !email || !password) {
          errorElement.textContent = 'Please fill in all fields';
          return;
        }
        
        try {
          const response = await fetch('/api/auth/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, username, email, password, role: 'customer' })
          });
          
          const data = await response.json();
          
          if (data.success) {
            currentUser = data.user;
            updateUserInterface();
            authContainer.style.display = 'none';
          } else {
            errorElement.textContent = data.message || 'Registration failed';
          }
        } catch (error) {
          console.error('Registration error:', error);
          errorElement.textContent = 'An error occurred during registration';
        }
      });
      
      // Logout button
      logoutButton.addEventListener('click', async function() {
        try {
          await fetch('/api/auth/logout');
          currentUser = null;
          updateUserInterface();
          authContainer.style.display = 'none';
        } catch (error) {
          console.error('Logout error:', error);
        }
      });
      
      // Add to cart buttons
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('add-to-cart')) {
          const productId = e.target.getAttribute('data-id');
          alert(`Product ID ${productId} added to cart!`);
        }
      });
    }
    
    // Update user interface based on authentication status
    function updateUserInterface() {
      const userName = document.getElementById('user-name');
      const loginTab = document.getElementById('login-tab');
      const registerTab = document.getElementById('register-tab');
      const loginForm = document.getElementById('login-form');
      const registerForm = document.getElementById('register-form');
      const profileView = document.getElementById('profile-view');
      const authTitle = document.getElementById('auth-title');
      
      if (currentUser) {
        // User is logged in
        userName.textContent = currentUser.name || currentUser.username;
        loginTab.style.display = 'none';
        registerTab.style.display = 'none';
        loginForm.style.display = 'none';
        registerForm.style.display = 'none';
        profileView.style.display = 'block';
        authTitle.textContent = 'My Profile';
        
        // Update profile view
        document.getElementById('profile-name').textContent = currentUser.name || 'N/A';
        document.getElementById('profile-username').textContent = currentUser.username;
        document.getElementById('profile-email').textContent = currentUser.email;
      } else {
        // User is not logged in
        userName.textContent = 'Sign In';
        loginTab.style.display = 'block';
        registerTab.style.display = 'block';
        loginTab.classList.add('active');
        registerTab.classList.remove('active');
        loginForm.style.display = 'flex';
        registerForm.style.display = 'none';
        profileView.style.display = 'none';
        authTitle.textContent = 'Sign In';
      }
    }
    
    // Filter products based on search, category, vendor, and sort
    function filterProducts() {
      const searchTerm = document.getElementById('search-input').value.toLowerCase();
      const categoryValue = document.getElementById('category-filter').value;
      const vendorValue = document.getElementById('vendor-filter').value;
      const sortValue = document.getElementById('sort-filter').value;
      
      let filteredProducts = [...products];
      
      // Apply search filter
      if (searchTerm) {
        filteredProducts = filteredProducts.filter(product => 
          product.name.toLowerCase().includes(searchTerm) || 
          product.description.toLowerCase().includes(searchTerm)
        );
      }
      
      // Apply category filter
      if (categoryValue !== 'all') {
        filteredProducts = filteredProducts.filter(product => 
          product.category === categoryValue
        );
      }
      
      // Apply vendor filter
      if (vendorValue !== 'all') {
        filteredProducts = filteredProducts.filter(product => 
          product.vendors.some(vendor => vendor.name === vendorValue)
        );
      }
      
      // Apply sorting
      if (sortValue === 'price-low') {
        filteredProducts.sort((a, b) => {
          const aPrice = Math.min(...a.vendors.map(v => v.price));
          const bPrice = Math.min(...b.vendors.map(v => v.price));
          return aPrice - bPrice;
        });
      } else if (sortValue === 'price-high') {
        filteredProducts.sort((a, b) => {
          const aPrice = Math.min(...a.vendors.map(v => v.price));
          const bPrice = Math.min(...b.vendors.map(v => v.price));
          return bPrice - aPrice;
        });
      } else if (sortValue === 'name-asc') {
        filteredProducts.sort((a, b) => a.name.localeCompare(b.name));
      } else if (sortValue === 'name-desc') {
        filteredProducts.sort((a, b) => b.name.localeCompare(a.name));
      }
      
      // Update the product display
      loadProducts(filteredProducts);
    }
    
    // Check if user is already logged in
    async function checkAuthStatus() {
      try {
        const response = await fetch('/api/auth/user');
        const data = await response.json();
        
        if (data.success && data.user) {
          currentUser = data.user;
          updateUserInterface();
        }
      } catch (error) {
        console.error('Auth check error:', error);
      }
    }
    
    // Initialize the page
    async function initPage() {
      try {
        await fetchProducts();
        await checkAuthStatus();
        setupEventListeners();
      } catch (error) {
        console.error('Error initializing page:', error);
        // If fetchProducts fails, use the fallback data
        loadProducts(products);
        setupEventListeners();
      }
    }
    
    // Start the initialization
    initPage();
  </script>
</body>
</html>
